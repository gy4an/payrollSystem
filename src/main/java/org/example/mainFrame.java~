package org.example;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class mainFrame extends JFrame {
    Attendance attendanceFrame = new Attendance();
    JTextField idTextField, nameTextField, positionTextField, salaryTextField;
    JLabel idLabel, nameLabel, positionLabel, salaryLabel;
    JButton addButton, updateButton, deleteButton, computeButton, ownerCostsButton;
    JTable table;
    DefaultTableModel tableModel;
    List<Employee> employeesList = new ArrayList<>();


    public mainFrame() {
        this.setTitle("Payroll System");
        this.setLayout(new BorderLayout());


        JPanel formPanel = new JPanel(new GridLayout(4,2,5,5));
        formPanel.setBorder(BorderFactory.createTitledBorder("Add Employee"));
        JPanel buttonPanel = new JPanel(new GridLayout(2,3,5,5));
        buttonPanel.setBorder(BorderFactory.createTitledBorder("Options"));

        idLabel = new JLabel("ID");
        idTextField = new JTextField();
        nameLabel = new JLabel("Name");
        nameTextField = new JTextField();
        positionLabel = new JLabel("Position");
        positionTextField = new JTextField();
        salaryLabel = new JLabel("Salary");
        salaryTextField = new JTextField();
//        computeButton = new JButton("Compute Payroll");
        addButton = new JButton("Add Employee");
        updateButton = new JButton("Update Employee");
        deleteButton = new JButton("Delete Employee");
        ownerCostsButton = new JButton("View Owner Costs");


        formPanel.add(idLabel);
        formPanel.add(idTextField);
        formPanel.add(nameLabel);
        formPanel.add(nameTextField);
        formPanel.add(positionLabel);
        formPanel.add(positionTextField);
        formPanel.add(salaryLabel);
        formPanel.add(salaryTextField);
//        formPanel.add(computeButton);
        buttonPanel.add(addButton);
        buttonPanel.add(updateButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(ownerCostsButton);


        add(formPanel, BorderLayout.NORTH);
        add(buttonPanel, BorderLayout.SOUTH);

        tableModel = new DefaultTableModel(new String[]{"ID", "Name", "Position", "Salary"}, 0);
        table = new JTable(tableModel);
        add(new JScrollPane(table), BorderLayout.CENTER);

        addButton.addActionListener(e -> addEmployee());
//        computeButton.addActionListener(e -> computePayroll());
        JButton payrollSummaryButton = new JButton("View Payroll Summary");
        buttonPanel.add(payrollSummaryButton);

        payrollSummaryButton.addActionListener(e -> showPayrollSummary());
        

        this.setSize(600, 500);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible(true);
        attendanceFrame.setVisible(true);
    }


    public void addEmployee() {
        String id = idTextField.getText().trim();
        String name = nameTextField.getText().trim();
        String position = positionTextField.getText().trim();
        String salaryText = salaryTextField.getText().trim();

        if (id.isEmpty() || name.isEmpty() || position.isEmpty() || salaryText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Duplicate ID check
        for (Employee emp : employeesList) {
            if (emp.getId().equals(id)) {
                JOptionPane.showMessageDialog(this, "Employee ID already exists!", "Duplicate ID", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }


        try {
            double salary = Double.parseDouble(salaryText);

            Employee employee = new Employee(id, name, position, salary);
            employeesList.add(employee);
            tableModel.addRow(new Object[]{id, name, position, salary});

            attendanceFrame.addEmployee(id, name);

            idTextField.setText("");
            nameTextField.setText("");
            positionTextField.setText("");
            salaryTextField.setText("");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid salary format.", "Input Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    public void showOwnerCosts() {
        double totalSSS = 0;
        double totalPhilHealth = 0;
        double totalPagibig = 0;
        double totalSalary = 0;

        StringBuilder db = new StringBuilder();

        for (Employee employee : employeesList) {
            List<AttendanceRecord> records = attendanceFrame.getAttendanceDataById(employee.getId());
            int daysWorked = 0;
            for (AttendanceRecord record : records) {
                if (record.getTimeIn() != null && record.getTimeOut() != null) {
                    daysWorked++;
                }
            }

            double dailyRate = employee.getBasicSalary() / 22.0;
            double salary = dailyRate * daysWorked;
        }
    }

    public void showPayrollSummary() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Select an employee to view payroll summary.");
            return;
        }

        try {
            String id = table.getValueAt(selectedRow, 0).toString();
            String name = table.getValueAt(selectedRow, 1).toString();
            String position = table.getValueAt(selectedRow, 2).toString();
            double salary = Double.parseDouble(table.getValueAt(selectedRow, 3).toString());

            // Safely get attendance data
            List<AttendanceRecord> attendanceData = attendanceFrame.getAttendanceDataById(id);
            if (attendanceData == null) {
                JOptionPane.showMessageDialog(this, "No attendance records found for employee ID: " + id);
                return;
            }

            // Find the employee object (double-checking if it exists)
            Employee selectedEmployee = null;
            for (Employee emp : employeesList) {
                if (emp.getId().equals(id)) {
                    selectedEmployee = emp;
                    break;
                }
            }

            if (selectedEmployee == null) {
                JOptionPane.showMessageDialog(this, "Employee not found in the list. Please check the ID.");
                return;
            }

            // Now launch the summary
            new PayrollSummaryFrame(name, id, salary, attendanceData, employeesList);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid salary format.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            e.printStackTrace();
        }
    }



}
